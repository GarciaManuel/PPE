type Query {
  "Obtenemos las lista de todos los usuarios"
  users: [User!]!
  "Iniciamos sesión en el sistema"
  login(email: String!, password: String!): ResultGeneral!
  "Obtener nuestra información con el token"
  me: ResultGeneral!
  "Obtain patient's measures"
  getMeasures(patient: String!): [Measure!]!
}

type Mutation {
  "Registro de los usuarios en el sistema"
  register(user: UserInput): ResultGeneral!
  deleteUser(userId: Int!): ResultGeneral!
  ##addMeasure(measure: MeasureInput): ResultGeneral!
  ##deleteMeasure(measureId: String): ResultGeneral!
}

type User {
  id: ID!
    name: String!
    lastname: String!
    email: String!
    password: String!
    podiatrist: Boolean
    registerDate: String!
}

type Sensor {
  number: Int!
  posX: Float!
  posY: Float!
  averagePressureS: Float!
  minPressureS: Float!
  maxPressureS: Float!
}

type Measure {
  patientId: String!
  date: String!
  duration: String
  csv: String
  sensors: [Sensor]!
}

type Meeting{
    id: ID!
    pacient: String!
    anomaly: Boolean!
    podiatrist: String!
    meetingDate: String!
}


input UserInput {
    name: String!
    lastname: String!
    email: String!
    password: String!
    podiatrist: Boolean

}

input SensorInput {
  number: Int!
  posX: Float!
  posY: Float!
  averagePressureS: Float!
  minPressureS: Float!
  maxPressureS: Float!
}

input MeasureInput {
  patientId: String!
  duration: String
  csv: String
  sensors: [SensorInput]!
}


type ResultGeneral {
  status: Boolean!
  message: String!
}

extend type ResultGeneral {
  measure: Measure
}

extend type ResultGeneral {
  user: User
}

extend type ResultGeneral {
  token: String
}
extend type ResultGeneral {
    name: String!
    lastName: String!
    email: String!
    password: String!
}
